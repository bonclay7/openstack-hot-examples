heat_template_version: 2013-05-23
description: AutoScaling Mediawiki connected to puppetmaster
parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: ubuntu-trusty-amd64
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: heat-instances-key
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: demo-net
  floating_ip_id:
    type: string
    label: Floating IP ID
    description: Floating ip adress. $ neutron floatingip-list
    default: ab70843f-7f80-4311-a4a5-d40ae1b83c3e
  ec2-user_password:
    type: string
    label: Modified root password
    default: popito225
    hidden: true
  puppetmaster_server_ip:
    type: string
    label: Puppetmaster IP address for wiki instances configuration
    default: 192.168.17.56
  puppetmaster_server_name:
    type: string
    label:  Puppetmaster server hostname for wiki instances configuration
    default: puppetmaster.openstacklocal

resources:  
  wiki_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 80
          port_range_max: 80
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 3
      resource:
        type: wiki.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image}
          key_name: {get_param: key_name}
          private_network: { get_param: private_network }
          pool_id: {get_resource: pool}      
          ec2-user_password: {get_param: ec2-user_password}    
          wiki_secgroup: { get_resource: wiki_secgroup }
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          puppetmaster_server_ip: { get_param: puppetmaster_server_ip }
          puppetmaster_server_name: { get_param: puppetmaster_server_name }
  wiki_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: 1
  wiki_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: -1
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 30% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 30
      alarm_actions:
        - {get_attr: [wiki_scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 2 minutes
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 15
      alarm_actions:
        - {get_attr: [wiki_scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5
  pool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      monitors: [{get_resource: monitor}]      
      lb_method: ROUND_ROBIN
      subnet: demo-subnet
      vip:
        protocol_port: 80
  lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: {get_resource: pool}      

  # assign a floating ip address to the load balancer
  # pool.
  association:
     type: OS::Neutron::FloatingIPAssociation
     properties:
       floatingip_id: { get_param: floating_ip_id }
       port_id: {get_attr: [pool, vip, port_id]}

outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [wiki_scaleup_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [wiki_scaledown_policy, alarm_url]}
  pool_ip_address:
    value: {get_attr: [pool, vip, address]}
    description: The IP address of the load balancing pool
  website_url:
    value:
      str_replace:
        template: http://host/mediawiki/
        params:
          host: association
    description: >
      This URL is the "external" URL that can be used to access the
      Wordpress site.
  ceilometer_query:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util
          -q metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
      This is a Ceilometer query for statistics on the cpu_util meter
      Samples about OS::Nova::Server instances in this stack.  The -q
      parameter selects Samples according to the subject's metadata.
      When a VM's metadata includes an item of the form metering.X=Y,
      the corresponding Ceilometer resource has a metadata item of the
      form user_metadata.X=Y and samples about resources so tagged can
      be queried with a Ceilometer query term of the form
      metadata.user_metadata.X=Y.  In this case the nested stacks give
      their VMs metadata that is passed as a nested stack parameter,
      and this stack passes a metadata of the form metering.stack=Y,
      where Y is this stack's ID.